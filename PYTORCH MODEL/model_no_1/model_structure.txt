import torch
import torch.nn as nn
import torch.nn.functional as F
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()

        self.conv1 = nn.Conv3d(1,96,(5,5,5), padding=0)
        self.pool  = nn.MaxPool3d(2, stride=2)
        self.conv2  =  nn.Conv3d(96,192,(3,3,3), padding=0)
        self.pool1  =  nn.MaxPool3d(2, stride=2)
        self.conv3  =  nn.Conv3d(192,384,(3,3,3), padding=0)
        self.pool2  =  nn.MaxPool3d(2, stride=2)
        
        self.ln1    =  nn.Linear(in_features=3072, out_features=4096)

        self.ln2    =  nn.Linear(in_features=4096, out_features=1024)
 
        self.out1    =  nn.Linear(in_features=1024, out_features=30)


    
    def forward(self, x):
        #x = self.pool(F.relu(self.conv1(x)))
        x = self.conv1(x)
        x = F.relu(x)
        x = self.pool(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = self.pool1(x)
        x = self.conv3(x)
        x = F.relu(x)
        x = self.pool2(x)
        x = x.view(-1, 3072)
        x = self.ln1(x)
        x = F.relu(x)